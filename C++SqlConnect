
#include <iostream>
#include <windows.h>
#include <sqltypes.h>
#include <sql.h>
#include <sqlext.h>

using namespace std;

int main() {
#define SQL_RESULT_LEN 240
#define SQL_RETURN_CODE_LEN 1000
	//define handles and variables
	SQLHANDLE sqlConnHandle;
	SQLHANDLE sqlStmtHandle;
	SQLHANDLE sqlEnvHandle;
	SQLWCHAR retconstring[SQL_RETURN_CODE_LEN];
	//initializations
	sqlConnHandle = NULL;
	sqlStmtHandle = NULL;
	SQLWCHAR sqlstate[1024];
		SQLWCHAR message[1024];
	//allocations
	if (SQL_SUCCESS != SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &sqlEnvHandle))
		goto COMPLETED;
	if (SQL_SUCCESS != SQLSetEnvAttr(sqlEnvHandle, SQL_ATTR_ODBC_VERSION, (SQLPOINTER)SQL_OV_ODBC3, 0))
		goto COMPLETED;
	if (SQL_SUCCESS != SQLAllocHandle(SQL_HANDLE_DBC, sqlEnvHandle, &sqlConnHandle))
		goto COMPLETED;
	//output
	
	//connect to SQL Server  
	//I am using a trusted connection and port 14808
	//it does not matter if you are using default or named instance
	//just make sure you define the server name and the port
	//You have the option to use a username/password instead of a trusted connection
	//but is more secure to use a trusted connection

	
	switch (SQLDriverConnect(sqlConnHandle,
		NULL,
		//(SQLWCHAR*)L"DRIVER={SQL Server};SERVER=localhost, 1433;DATABASE=master;UID=username;PWD=password;",
		(SQLWCHAR*)L"DRIVER=SQL Server;SERVER=saini\\SQLEXPRESS;DATABASE=TestDB;Trusted=true;",
		SQL_NTS,
		retconstring,
		1024,
		NULL,
		SQL_DRIVER_NOPROMPT)) {
	case SQL_SUCCESS:
		printf("Successfully connected to SQL Server");
		//cout << "\n";
		break;
	case SQL_SUCCESS_WITH_INFO:
		printf("Successfully connected to SQL Server");
		break;
	case SQL_INVALID_HANDLE:
		printf("Error connected to SQL Server");
		goto COMPLETED;
	case SQL_ERROR:

		
		if (SQL_SUCCESS == SQLGetDiagRec(SQL_HANDLE_DBC, sqlConnHandle, 1, sqlstate, NULL, message, 1024, NULL))
		//show_error(SQL_HANDLE_DBC, sqlConnHandle);
		
		printf("Error connected to SQL Server");
		goto COMPLETED;
	default:
		break;
	}
	

	if (SQL_SUCCESS != SQLAllocHandle(SQL_HANDLE_STMT, sqlConnHandle, &sqlStmtHandle))
		printf("-1");

	if (SQL_SUCCESS != SQLExecDirect(sqlStmtHandle, (SQLWCHAR*)L"select * from testtable", SQL_NTS))
	{
		SQL_SUCCESS == SQLGetDiagRec(SQL_HANDLE_DBC, sqlConnHandle, 1, sqlstate, NULL, message, 1024, NULL);
		printf("-1");
	}
	else
	{
		char firstName[64];
		char lastName[64];
		int id;
		printf("----");
		while (SQLFetch(sqlStmtHandle) == SQL_SUCCESS)
		{
			SQLGetData(sqlStmtHandle, 1, SQL_C_ULONG, &id, 0, NULL);
			SQLGetData(sqlStmtHandle, 2, SQL_C_CHAR, firstName, 64, NULL);
			SQLGetData(sqlStmtHandle, 3, SQL_C_CHAR, lastName, 64, NULL);

			printf(firstName);
			printf("----");
			//printf("id-{0},firstName-{1},lastname-{2}", id, firstName, lastName);
		}
	}

	/*//if there is a problem connecting then exit application
	if (SQL_SUCCESS != SQLAllocHandle(SQL_HANDLE_STMT, sqlConnHandle, &sqlStmtHandle))
		goto COMPLETED;
	//output
	cout << "\n";
	cout << "Executing T-SQL query...";
	cout << "\n";
	//if there is a problem executing the query then exit application
	//else display query result
	if (SQL_SUCCESS != SQLExecDirect(sqlStmtHandle, (SQLWCHAR*)L"SELECT @@VERSION", SQL_NTS)) {
		cout << "Error querying SQL Server";
		cout << "\n";
		goto COMPLETED;
	}
	else {
		//declare output variable and pointer
		SQLCHAR sqlVersion[SQL_RESULT_LEN];
		SQLINTEGER ptrSqlVersion;
		while (SQLFetch(sqlStmtHandle) == SQL_SUCCESS) {
			SQLGetData(sqlStmtHandle, 1, SQL_CHAR, sqlVersion, SQL_RESULT_LEN, &ptrSqlVersion);
			//display query result
			cout << "\nQuery Result:\n\n";
			cout << sqlVersion << endl;
		}
	}*/
	//close connection and free resources
COMPLETED:
	SQLFreeHandle(SQL_HANDLE_STMT, sqlStmtHandle);
	SQLDisconnect(sqlConnHandle);
	SQLFreeHandle(SQL_HANDLE_DBC, sqlConnHandle);
	SQLFreeHandle(SQL_HANDLE_ENV, sqlEnvHandle);
	//pause the console window - exit when key is pressed
	printf("\nPress any key to exit...");
	getchar();

	/*RETCODE returnCode;

	// initialize handles
	SQLHENV handleEnvironment;
	SQLHDBC handleConnection;
	SQLHSTMT handleStatement;

	// allocate environment handle
	SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &handleEnvironment);

	// set odbc driver version for environment
	SQLSetEnvAttr(handleEnvironment, SQL_ATTR_ODBC_VERSION, (void *)SQL_OV_ODBC3, 0);

	// allocate connection handle
	SQLAllocHandle(SQL_HANDLE_DBC, handleEnvironment, &handleConnection);

	// connect to database
	SQLRETURN ret;
	ret =SQLDriverConnect(handleConnection, NULL, (SQLWCHAR*)TEXT("DRIVER={SQL Native Client};SERVER=saini\SQLEXPRESS;DATABASE=TestDB;;UID=sa;PWD=password@123;"), SQL_NTS, NULL, 0, NULL, SQL_DRIVER_NOPROMPT);
	//ret = (SQLDriverConnect(handleConnection, NULL,(SQLWCHAR*)"DRIVER={SQL Server};SERVER=saini\\SQLEXPRESS, 1433;DATABASE=TestDB;UID=sa;PWD=password@123;",SQL_NTS, NULL, 1024, NULL, SQL_DRIVER_NOPROMPT));*/
	
		
	return 0;
}
void show_error(unsigned int handletype, const SQLHANDLE& handle)
{
	SQLWCHAR sqlstate[1024];
	SQLWCHAR message[1024];
	if (SQL_SUCCESS == SQLGetDiagRec(handletype, handle, 1, sqlstate, NULL, message, 1024, NULL))
		printf("sds");
		//printf("Message: " + message + "\nSQLSTATE: " + sqlstate );
}
