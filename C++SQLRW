//#include "sqlcli.h"
#include <iostream>
#include <windows.h>
#include <sqltypes.h>
#include <sql.h>
#include <sqlext.h>

using namespace std;

int main() {
#define SQL_RESULT_LEN 240
#define SQL_RETURN_CODE_LEN 1000
#define _CRT_SECURE_NO_WARNINGS
	//define handles and variables
	SQLHANDLE sqlConnHandle;
	SQLHANDLE sqlStmtHandle;
	SQLHANDLE sqlEnvHandle;
	SQLWCHAR retconstring[SQL_RETURN_CODE_LEN];
	//initializations
	sqlConnHandle = NULL;
	sqlStmtHandle = NULL;
	SQLWCHAR sqlstate[1024];
	SQLWCHAR message[1024];
	SQLRETURN retcode;
	//allocations
	if (SQL_SUCCESS != SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &sqlEnvHandle))
		goto COMPLETED;
	if (SQL_SUCCESS != SQLSetEnvAttr(sqlEnvHandle, SQL_ATTR_ODBC_VERSION, (SQLPOINTER)SQL_OV_ODBC3, 0))
		goto COMPLETED;
	if (SQL_SUCCESS != SQLAllocHandle(SQL_HANDLE_DBC, sqlEnvHandle, &sqlConnHandle))
		goto COMPLETED;
	//output
	
	//connect to SQL Server  
	//I am using a trusted connection and port 14808
	//it does not matter if you are using default or named instance
	//just make sure you define the server name and the port
	//You have the option to use a username/password instead of a trusted connection
	//but is more secure to use a trusted connection

	
	switch (SQLDriverConnect(sqlConnHandle,
		NULL,
		//(SQLWCHAR*)L"DRIVER={SQL Server};SERVER=localhost, 1433;DATABASE=master;UID=username;PWD=password;",
		(SQLWCHAR*)L"DRIVER=SQL Server;SERVER=saini\\SQLEXPRESS;DATABASE=TestDB;Trusted=true;",
		SQL_NTS,
		retconstring,
		1024,
		NULL,
		SQL_DRIVER_NOPROMPT)) {
	case SQL_SUCCESS:
		printf("Successfully connected to SQL Server");
		//cout << "\n";
		break;
	case SQL_SUCCESS_WITH_INFO:
		printf("Successfully connected to SQL Server");
		break;
	case SQL_INVALID_HANDLE:
		printf("Error connected to SQL Server");
		goto COMPLETED;
	case SQL_ERROR:

		
		if (SQL_SUCCESS == SQLGetDiagRec(SQL_HANDLE_DBC, sqlConnHandle, 1, sqlstate, NULL, message, 1024, NULL))
		//show_error(SQL_HANDLE_DBC, sqlConnHandle);
		
		printf("Error connected to SQL Server");
		goto COMPLETED;
	default:
		break;
	}
	

	if (SQL_SUCCESS != SQLAllocHandle(SQL_HANDLE_STMT, sqlConnHandle, &sqlStmtHandle))
		printf("-1");
	//int random_integer = rand();
	char  str='k';
	
	
	

	char sqlString[400];
	wchar_t wsql[500];
	char url[1000];
	char code[6];

	printf("\nEnter url\n");
	scanf_s("%999s", url,1000);
	printf("\nEnter code\n");
	scanf_s("%5s", code,6);

	
	
	//The first SQL statement in the char array, and then converted to wchar_t
	sprintf_s(sqlString,"insert into tinyurl Values ('%s','%s')", url,code);
	MultiByteToWideChar(CP_UTF8, 0, sqlString, strlen(sqlString), wsql, sizeof wsql / sizeof *wsql);
	wsql[strlen(sqlString)] = '\0';
	//Execute a SQL statement
	

	
	//wchar_t str1[] =  L"insert into tinyurl Values ('wwww.google.com/jjkj/wewe','adad')";
	
	//retcode = SQLExecDirect(sqlStmtHandle, (SQLWCHAR*)L"insert into tinyurl Values ('wwww.google.com/jjkj/wewe','adad')", SQL_NTS);
	if (SQL_SUCCESS != SQLExecDirect(sqlStmtHandle, wsql, SQL_NTS))
	{
		SQL_SUCCESS == SQLGetDiagRec(SQL_HANDLE_DBC, sqlConnHandle, 1, sqlstate, NULL, message, 1024, NULL);
		printf("-1");
	}
	else
	{
		char FULLURL[64];
		char CODE[64];
		int ID;
		printf("Insert successfully");

	}


	//The first SQL statement in the char array, and then converted to wchar_t
	printf("\nEnter code\n");
	scanf_s("%5s", code, 6);
	sprintf_s(sqlString, "select FULLURL from tinyurl where code='%s'", code);
	MultiByteToWideChar(CP_UTF8, 0, sqlString, strlen(sqlString), wsql, sizeof wsql / sizeof *wsql);
	wsql[strlen(sqlString)] = '\0';
	//Execute a SQL statement

	if (SQL_SUCCESS != SQLExecDirect(sqlStmtHandle, (SQLWCHAR*)wsql, SQL_NTS))
	{
		SQL_SUCCESS == SQLGetDiagRec(SQL_HANDLE_DBC, sqlConnHandle, 1, sqlstate, NULL, message, 1024, NULL);
		printf("-1");
	}
	else
	{
		
		int ID;
		char FULLURL[1000];
		char CODE[6];
		printf("----");
		while (SQLFetch(sqlStmtHandle) == SQL_SUCCESS)
		{
			//SQLGetData(sqlStmtHandle, 1, SQL_C_ULONG, &ID, 0, NULL);
			SQLGetData(sqlStmtHandle, 1, SQL_C_CHAR, FULLURL, 1000, NULL);
			//SQLGetData(sqlStmtHandle, 3, SQL_C_CHAR, CODE, 6, NULL);

			printf(FULLURL);
			printf("----");
			//printf("id-{0},firstName-{1},lastname-{2}", id, firstName, lastName);
		}
	}

	
	//close connection and free resources
COMPLETED:
	SQLFreeHandle(SQL_HANDLE_STMT, sqlStmtHandle);
	SQLDisconnect(sqlConnHandle);
	SQLFreeHandle(SQL_HANDLE_DBC, sqlConnHandle);
	SQLFreeHandle(SQL_HANDLE_ENV, sqlEnvHandle);
	//pause the console window - exit when key is pressed
	printf("\nPress any key to exit...");
	getchar();

	
		
	return 0;
}
void show_error(unsigned int handletype, const SQLHANDLE& handle)
{
	SQLWCHAR sqlstate[1024];
	SQLWCHAR message[1024];
	if (SQL_SUCCESS == SQLGetDiagRec(handletype, handle, 1, sqlstate, NULL, message, 1024, NULL))
		printf("sds");
		//printf("Message: " + message + "\nSQLSTATE: " + sqlstate );
}
